{
    "summary": "The code defines a `SFTBuffer` class for storing `SftInstance` objects with methods for batching, padding, and collating data. It also includes a function `collate_fn` that pads input IDs and labels before returning an instance of `SftBatch`. The class inherits from `Dataset` and takes a pad token id and ignore index as parameters.",
    "details": [
        {
            "comment": "The code defines a function `collate_fn` that takes a sequence of `SftInstance` objects, pads the input IDs and labels with specified values, and returns an instance of `SftBatch` containing the padded tensors. The class `SFTBuffer` inherits from `Dataset`, indicating it implements methods to load and return data in batches. The constructor takes a pad token id and an optional ignore index for label padding.",
            "location": "\"/media/root/Toshiba XG3/works/LLM_Tree_Search/docs/src/tsllm/rl/data/sft_buffer.py\":0-42",
            "content": "from typing import List, Sequence\nimport torch\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom functools import partial\nfrom torch.nn.utils.rnn import pad_sequence\nfrom tsllm.rl.data.node_types import SftBatch, SftInstance\ndef collate_fn(\n    pad_token_id: int,\n    IGNORE_INDEX: int,\n    elems: Sequence[SftInstance],\n) -> SftBatch:\n    input_ids = pad_sequence(\n        [elem.input_ids for elem in elems],\n        padding_value=pad_token_id,\n        batch_first=True,\n    )\n    label = pad_sequence(\n        [elem.label for elem in elems],\n        padding_value=IGNORE_INDEX,\n        batch_first=True,\n    )\n    attn_mask = input_ids.ne(pad_token_id)\n    returns = pad_sequence(\n        [elem.returns for elem in elems],\n        padding_value=0.0,\n        batch_first=True,\n    )\n    mask = pad_sequence(\n        [elem.mask for elem in elems],\n        padding_value=0,\n        batch_first=True,\n    )\n    return SftBatch(input_ids, label, attn_mask, returns, mask)\nclass SFTBuffer(Dataset):\n    def __init__(self, pad_token_id, IGNORE_INDEX=-100) -> None:"
        },
        {
            "comment": "This code defines a buffer class for storing instances of SftInstance. The class has methods for pushing instances, adding single instance, clearing all instances, retrieving the length and accessing specific instances. It also includes a method to create a DataLoader for batching and collating data with padding and ignore index specified.",
            "location": "\"/media/root/Toshiba XG3/works/LLM_Tree_Search/docs/src/tsllm/rl/data/sft_buffer.py\":43-70",
            "content": "        super().__init__()\n        self.history: List[SftInstance] = []\n        self.IGNORE_INDEX = IGNORE_INDEX\n        self.pad_token_id = pad_token_id\n    def push(self, exps: Sequence[SftInstance]):\n        self.history += exps\n    def add(self, inst: SftInstance):\n        self.history.append(inst)\n    def clear(self):\n        self.history = []\n    def __len__(self):\n        return len(self.history)\n    def __getitem__(self, index):\n        return self.history[index]\n    def create_loader(self, batch_size: int, shuffle: bool) -> DataLoader:\n        return DataLoader(\n            self,\n            batch_size,\n            shuffle=shuffle,\n            collate_fn=partial(collate_fn, self.pad_token_id, self.IGNORE_INDEX),\n        )"
        }
    ]
}