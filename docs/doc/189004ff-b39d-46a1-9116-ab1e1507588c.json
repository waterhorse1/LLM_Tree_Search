{
    "summary": "The given comments describe a Monte Carlo Tree Search (MCTS) function that generates episodes by selecting actions and updating the MCTS tree based on environment responses, while collecting trajectory data. The function is named `_mcts_rollout_v2` and returns a list of outputs containing generated texts, values, and token counts from an MCTS rollout with optional simulation and token parameters.",
    "details": [
        {
            "comment": "This function, _mcts_rollout_v1, performs Monte Carlo Tree Search (MCTS) for a given environment and policy. It resets the environment and MCTS tree at the start of each iteration. It generates episodes by selecting actions using the provided policy until done condition is met. It updates the MCTS tree based on the environment's response to the selected action. It returns the generated episodes and the number of tokens generated.",
            "location": "\"/media/root/Toshiba XG3/works/LLM_Tree_Search/docs/src/tsllm/inference/trajectory_collector.py\":0-35",
            "content": "from typing import Optional\nfrom tsllm.envs.base_env import CoTEnv\nfrom tsllm.inference.evaluation.vote_utils import MAJORITY_VOTE\nfrom tsllm.mcts.tree import MCTS\nfrom tsllm.mcts.utils import get_root\nimport time\ndef _mcts_rollout_v1(\n    mcts: MCTS,\n    env: CoTEnv,\n    policy_forward_value,\n    n_rollout: int,\n    reset_total_tree: bool,\n    sample: bool,\n    clear_total_tree: bool,\n):\n    \"\"\"MCTS.GET_NEXT_ACTION\"\"\"\n    output_episodes = []\n    num_generated_token = 0\n    env.reset(True)\n    mcts.root = None\n    done = False\n    for i in range(n_rollout):\n        while not done:\n            action, _, current_node = mcts.get_next_action(\n                env,\n                policy_forward_fn=policy_forward_value,\n                sample=sample,\n                return_tree=True,\n            )\n            mcts.root = current_node.children[action]\n            next_state, reward, terminated, truncated, info = env.step(\n                action, update_legal_action=len(mcts.root.children) == 0\n            )\n            done = terminated or truncated"
        },
        {
            "comment": "The code handles the trajectory collection during inference. It updates the legal actions, stores trajectory data for each path, and resets or clears the Monte Carlo Tree Search (MCTS) tree based on specified conditions.",
            "location": "\"/media/root/Toshiba XG3/works/LLM_Tree_Search/docs/src/tsllm/inference/trajectory_collector.py\":37-63",
            "content": "            if not done and len(mcts.root.children) > 0:\n                env._legal_actions = [\n                    {\"action\": a, \"prob\": None} for a in mcts.root.children.keys()\n                ]\n        num_generated_token = mcts.num_generated_token\n        traj_data = {\n            \"path_idx\": i,\n            \"text\": env.answer.strip(),  # drop the last \"\\n\"\n            \"value\": mcts.root.value,\n            \"num_generated_token\": num_generated_token,\n        }\n        output_episodes.append(traj_data)\n        assert not (reset_total_tree and clear_total_tree)  # cannot be both true\n        if reset_total_tree:\n            if i < n_rollout - 1:\n                mcts.root = None\n                env.reset(update_legal_action=True)\n        else:\n            mcts.root = get_root(current_node)\n            if clear_total_tree:\n                mcts.clear_node(mcts.root)\n            env.reset(update_legal_action=False)\n            env._legal_actions = [\n                {\"action\": a, \"prob\": None} for a in mcts.root.children.keys()"
        },
        {
            "comment": "This code defines a function `_mcts_rollout_v2` that performs an MCTS rollout with the given `MCTS` object, environment (`env`), and policy forward value. It returns a list of outputs containing the generated texts, values, and the number of generated tokens. The maximum simulation and token parameters are optional for this function call.",
            "location": "\"/media/root/Toshiba XG3/works/LLM_Tree_Search/docs/src/tsllm/inference/trajectory_collector.py\":64-93",
            "content": "            ]\n        done = False\n    return output_episodes\ndef _mcts_rollout_v2(\n    mcts: MCTS,\n    env: CoTEnv,\n    policy_forward_value,\n    n_rollout: int,\n    max_simulation: Optional[int],\n    max_token: Optional[int],\n):\n    \"\"\"MCTS.ROLLOUT\"\"\"\n    output_list, num_simulation, root = mcts.rollout(\n        env,\n        n_rollout,\n        policy_forward_value,\n        max_num_simulation=max_simulation,\n        max_token=max_token,\n        return_tree=True,\n    )\n    # texts = [x[\"text\"].strip() for x in output_list]\n    # values = [x[\"value\"] for x in output_list]\n    # num_generated_token = mcts.num_generated_token\n    return output_list  # texts, values, num_generated_token"
        }
    ]
}